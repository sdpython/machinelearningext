
language: python

python:
  - { PATH: "{{Python37}}", VERSION: 3.7, DIST: std, PYINT: python3.7 }
  
virtualenv:
  - path: {{ospathjoin(root_path, pickname("$NAME_JENKINS", project_name + "_$VERSION_$DIST_$NAME"), "_venv")}}
  
install:
  - git submodule update --init --recursive
  - $PYINT -c "from pip._internal import main;main(\"install --no-cache-dir --no-deps --index http://localhost:8067/simple/ jyquickhelper pyquickhelper --extra-index-url=https://pypi.python.org/simple/\".split())"
  - $PYINT -c "from pip._internal import main;main(\"install --no-cache-dir --no-deps --index http://localhost:8067/simple/ csharpy>0.1.53 --extra-index-url=https://pypi.python.org/simple/\".split())"
  - $PYINT -c "from pip._internal import main;main(\"install -r docs/requirements.txt\".split())"
  - $PYINT --version
  - $PYINT -c "from pip._internal import main;main([\"freeze\"])"
  - export DOTNET_CLI_TELEMETRY_OPTOUT=1
  # Build machinelearning
  # if this part fails due to permission issue, it should be manually
  # called on the jenkins server.
  - cd machinelearning
  - bash build.sh -Debug
  - bash build.sh -Release
  - cd ..
  - if [ ! -d machinelearning/dist ]; then mkdir machinelearning/dist; fi
  - if [ ! -d machinelearning/dist/Debug ]; then mkdir machinelearning/dist/Debug; fi
  - if [ ! -d machinelearning/dist/Release ]; then mkdir machinelearning/dist/Release; fi
  # machinelearning publish release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.Ensemble/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.FastTree/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.HalLearners/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.ImageAnalytics/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.KMeansClustering/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.Maml/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.LightGBM/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.Onnx/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.OnnxTransform/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.PCA/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.StandardLearners/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.Sweeper/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.TensorFlow/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/AnyCPU.Release/Microsoft.ML.TimeSeries/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/packages/lightgbm/2.2.3/runtimes/linux-x64/native/*.so machinelearning/bin/x64.Release/Native
  - cp machinelearning/packages/mlnetmkldeps/0.0.0.7/runtimes/linux-x64/native/*.so machinelearning/bin/x64.Release/Native
  - cp machinelearning/packages/google.protobuf/3.5.1/lib/netstandard1.0/*.* machinelearning/bin/x64.Release/Native
  - cp machinelearning/packages/system.codedom/4.5.0/lib/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/x64.Release/Native/*.so machinelearning/dist/Release
  # machinelearning publish debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.Ensemble/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.FastTree/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.HalLearners/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.ImageAnalytics/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.KMeansClustering/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.Maml/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.LightGBM/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.Onnx/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.OnnxTransform/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.PCA/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.StandardLearners/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.Sweeper/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.TensorFlow/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/bin/AnyCPU.Debug/Microsoft.ML.TimeSeries/netstandard2.0/*.dll machinelearning/dist/Debug
  - cp machinelearning/packages/lightgbm/2.2.3/runtimes/linux-x64/native/*.so machinelearning/bin/x64.Release/Native
  - cp machinelearning/packages/mlnetmkldeps/0.0.0.7/runtimes/linux-x64/native/*.so machinelearning/bin/x64.Release/Native
  - cp machinelearning/packages/google.protobuf/3.5.1/lib/netstandard1.0/*.* machinelearning/bin/x64.Release/Native
  - cp machinelearning/packages/system.codedom/4.5.0/lib/netstandard2.0/*.dll machinelearning/dist/Release
  - cp machinelearning/bin/x64.Release/Native/*.so machinelearning/dist/Release
  # machinelearning copy
  - cp machinelearning/bin/x64.Debug/Native/*.so machinelearning/dist/Debug
  - cp machinelearning/bin/x64.Release/Native/*.so machinelearning/dist/Release
  # Build machinelearningext
  - cd machinelearningext
  - dotnet build -c Debug
  - dotnet build -c Release
  - cd ..

script:
  - { CMD: "cd machinelearningext;dotnet test -c Debug TestMachineLearningExt -v n;dotnet test -c Release TestMachineLearningExt -v n;cd ..", NAME: "UT_CSHARP", CLEAN: "0" }

documentation:
  - if [ ${NAME} == "UT_CSHARP" ] then $PYINT -c "from sphinx import build_main;build_main(['-j2','-v','-T','-b','html','-d','docs/doctrees','docs/source','docs/build'])" fi
  - if [ ${NAME} == "UT_CSHARP" ] then cp -R -f docs/build/html dist/html fi
