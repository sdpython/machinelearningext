version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.6.4
    
    working_directory: ~/repo
    
    steps:
      - checkout

      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum ".gitmodules" }}
          - v2-dependencies-
      
      - run:
          name: local-gen
          command: |
            sudo locale-gen en_US.UTF-8 || true
            export LANG=en_US.UTF-8
      
      - run:
          name: submodules
          command: |
            git submodule update --init
            
      - run:
          name: install apt-transport-https
          command: |
            sudo apt-get update
            sudo apt-get install apt-transport-https

      - run:
          name: install C++ dependencies
          command: |
            sudo apt-get update
            sudo apt-get install libunwind8 curl
            sudo apt-get install libunwind8 liblttng-ust0 libcurl3 libuuid1 libkrb5-3 zlib1g libssl1.0.0

      - run:
          name: install cmake
          command: |
            sudo apt-get install cmake
            cmake --version

      - run:
          name: install mono (for documentation)
          command: |
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
            echo "deb https://download.mono-project.com/repo/debian stable-jessie main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
            sudo apt-get update
            sudo apt-get install mono-devel ca-certificates-mono

      - run:
          name: install dotnet
          command: |
            wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.asc.gpg
            sudo mv microsoft.asc.gpg /etc/apt/trusted.gpg.d/
            wget -q https://packages.microsoft.com/config/debian/8/prod.list
            sudo mv prod.list /etc/apt/sources.list.d/microsoft-prod.list
            sudo chown root:root /etc/apt/trusted.gpg.d/microsoft.asc.gpg
            sudo chown root:root /etc/apt/sources.list.d/microsoft-prod.list
            sudo apt-get update
            sudo apt-get install dotnet-sdk-2.1

      - run:
          name: remove clang
          command: |
                    sudo apt-get remove clang

      - run:
          name: install clang 6.0
          command: |
                    wget  http://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-linux-gnu-debian8.tar.xz
                    tar xvf clang+llvm-6.0.0-x86_64-linux-gnu-debian8.tar.xz
                    export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
                    sudo echo "export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:\$PATH" >> ~/.bashrc
                    clang --version

      - run:
          name: install pythonnet
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install pycparser
            export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
            clang --version
            python3 -m pip install -U pip
            python3 -m pip install -U setuptools wheel
            git clone https://github.com/pythonnet/pythonnet.git
            cd pythonnet
            python3 setup.py install --xplat
            cd ..

      - run:
          name: Install pandoc (documentation)
          command: |
                    sudo apt-get update 
                    wget https://github.com/jgm/pandoc/releases/download/2.2.1/pandoc-2.2.1-1-amd64.deb
                    sudo dpkg -i pandoc-2.2.1-1-amd64.deb
          
      - run:
          name: Install tex (documentation)
          command: |
                    sudo apt-get install -y texlive
                    sudo apt-get install -y texlive-latex-extra
                    sudo apt-get install -y dvipng
          
      - run:
          name: Install 7z, unrar (documentation)
          command: |
                    sudo apt-get install -y p7zip-full
          
      - run:
          name: Install InkScape (documentation)
          command: |
                    sudo apt-get install -y inkscape
          
      - run:
          name: Install graphviz (documentation)
          command: |
                    sudo apt-get install -y graphviz
          
      - run:
          name: Python packages (documentation)
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install pyquickhelper
            pip install csharpy
            pip install -r docs/requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum ".gitmodules" }}
        
      - run:
          name: build machinelearning release
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
            cd machinelearning
            bash build.sh -Release
            cd ..

      - run:
          name: build machinelearning debug
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
            cd machinelearning
            bash build.sh -Debug
            cd ..

      - run:
          name: publish machinelearning release
          command: |
            export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
            cd machinelearning
            bash -c "dotnet publish Microsoft.ML.sln -o ../../dist/Release -c Release --self-contained" || true
            cd ..

      - run:
          name: publish machinelearning debug
          command: |
            export PATH=/home/circleci/repo/clang+llvm-6.0.0-x86_64-linux-gnu-debian8/bin:$PATH
            cd machinelearning
            bash -c "dotnet publish Microsoft.ML.sln -o ../../dist/Debug -c Debug --self-contained" || true
            cd ..

      - run:
          name: copy native DLL
          command: |
            cp machinelearning/bin/x64.Debug/Native/*.so machinelearning/dist/Debug
            cp machinelearning/bin/x64.Release/Native/*.so machinelearning/dist/Release

      - run:
          name: build machinelearningext debug
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            export DOTNET_CLI_TELEMETRY_OPTOUT=1
            cd machinelearningext
            dotnet build -c Debug
            cd ..

      - run:
          name: run tests machinelearningext debug
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            export DOTNET_CLI_TELEMETRY_OPTOUT=1
            cd machinelearningext
            dotnet test -c Debug TestMachineLearningExt -v n
            cd ..

      - run:
          name: build machinelearningext release
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            export DOTNET_CLI_TELEMETRY_OPTOUT=1
            cd machinelearningext
            dotnet build -c Release
            cd ..

      - run:
          name: run tests machinelearningext release
          env:
            DOTNET_CLI_TELEMETRY_OPTOUT:1
          command: |
            export DOTNET_CLI_TELEMETRY_OPTOUT=1
            cd machinelearningext
            dotnet test -c Release TestMachineLearningExt -v n
            cd ..
            
      - run:
          name: copy artifacts
          command: |
            mkdir -p test-reports/dist
            mkdir -p test-reports/dist/Debug
            mkdir -p test-reports/dist/Release
            mkdir -p test-reports/doc
            python -u copy_binaries.py Release test-reports/dist/Release
            python -u copy_binaries.py Debug test-reports/dist/Release

      - run:
          name: documentation compilation
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python -c "from sphinx import build_main;build_main(['-j2','-v','-T','-b','html','-d','docs/doctrees','docs/source','docs/build'])"
            zip -r -9 test-reports/doc/documentation_html.zip docs/build
            
      - store_artifacts:
          path: test-reports
          destination: test-reports
